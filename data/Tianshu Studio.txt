History is usually presented as thick, boring books only read by researchers and too complicated for outsiders to understand. But, is it always true? This question emerged in my mind at a night in G1 second semester and my answer was——no. Why could not I simulate such history in a computer game? If I can extract mechanics and data from past research on politics, economics, and the military, why can't I make it? It is not my daydream and is supported only by my imagination. Paradox Studio, a Swedish game studio, has already made several series of games, such as the Victoria series, that simulate how western industrialization reshapes country societies. Therefore, I thought a team led by me could create such a game. 

SCIE, international departments of other high schools, and online connections are all sources of new blood.

In SCIE, we promoted Tianshu Studio ECA at ECA fair. I wrote G2's original texts and had a SWIS student with We Media experience and better junior high Chinese grades revise them. He could manipulate the Chinese better than me, attracting more members. While we did attract some members(around a dozen), I unfortunately found they could not propose anything useful independently in a failed offline meeting where I tried to discuss how to recruit more members with them. That meeting also exposed one of my weakness: I was not good at encouraging people emotionally. Instead, I tended to convey emotionally pessimistic thoughts to others. As a result, about a third of people quit after the meeting. To make matter worse, most of remained members lacked necessary passion and skills to contribute anything useful to the game. I tried to teach them programming and the core gameplay of similar games, but I failed again: they were completely ignorant about such games, so they had to start from scratch, and their time was limited because their parents rushed them into remediation institutions to spend more time on their schoolwork. The fundamental problem was their passion and skill; they weren't passionate enough to give up other activities and commit fully to this project, nor skilled enough to help me quickly. I couldn't improve either of their two characteristics, so I decided to target a more specific group of people in SCIE by writing the publicizing materials in A1 myself. I focused on our goals and work knowledge to attract pragmatic people. This would eliminate my need to emotionally encourage, since I could do so logically. It was partially correct. Though the 3 people recruited in A1 were much more useful than most of the 20 people recruited in G2, their individual productivity was still too low in comparison to other members in. According to our conversation, their poor skills couldn't be immediately compensated by their passion. That’s why in A1, I focused more on people recruited from other sources and planned to offer them more tutorial resources and detailed guides after the international exams. They'll hopefully improve. Since we now have more visible work, I'd include it in next year's publicity materials to attract people not directly interested in game-making but in unusual, challenging, and rewarding computer science tasks.

In terms of the international department of other senior high schools, because we do not have official branch ECAs in these schools, we rely on the publicizing from our members to their friends. It is not our mainstream publicizing source so and we have no official guide about how to do this and hence the specific implementation details depend on the actual wording of the member. These members,somehow, were often more skilled and passionate than the people recommending them.

In terms of online connection, at first I only utilized discussion groups in order to recruit members with specialized skills. In terms of recruiting method, their intrinsic nature that several topics may be discussed at the same time prevents me from sending a comprehensive description about us. I, then, need to ‘discuss’ with them, in other words, phrasing our goal in one or two sentences or questioning about specific problems encountered in the game design, and in the discussion try to locate interested members and to persuade them to join. This method, unfortunately, could not recruit enough members to fulfill our needs because its intrinsic inefficiency-each new member required my personal attention. Therefore, I sought another source: forums. Forums exchange information in the form of posts and replies, which makes relatively more specific descriptions possible. I, however, assisted with some discussion with some members in my team experienced with typical forum posts, find one additional rule for posting articles in the forum: dividing the long article into several replies in the same post, each of which should be 100-300 characters. It is an unspoken convention for writing something in the forums and empirically also attracts more readers somehow. Also, by simple deduction, I figure out that the style of the texts should be different from the texts used within SCIE: in the forums, the texts must pass a sense of earnestness and authenticity to the readers with some specific details included. Most readers in the forums are already adults and have seen a wave of swindlers bragging about their own game as so-called the beacon of Chinese game and unscrupulously attracting attention from which they make money for themselves. I must make our post distinct from their posts, that is to say, I have to be very pragmatic and honest about our team and work instead of inflating our ‘dream’ so that the readers believe that we do want to make something and consider seriously whether to join us. (https://tieba.baidu.com/p/7560785829?red_tag=0061188941). This strategy was proven to be exceptionally useful because our post got tens of thousands of views, and more than 95% of our current members came from different forums. After initial post, we began to share our development progress(such as the newest rendering of map) and design progress(such as the model of regional market) regularly in forums. In these posts, more bragging was included because of two reasons. Firstly, two competitors emerged, and their development diaries included much more bragging and were surprisingly effective. Therefore, we believed that more bragging was definitely needed to attract more attention and more potential workers. Secondly, after dozens of new members joining, our development progressed far more rapidly, and hence we possessed enough solid work on which credible bragging materials can be based.

After publicizing, some people would contact me and then the interview process begins. I talk to them online individually through WeChat or QQ and one of the utmost focuses in the conversation (some snapshots are in the folder) is his capabilities, more specifically, whether he has skills that meet our requirements. While sometimes this is a plain match that for example can be the requirement of map image adjustment versus the ability to utilize PhotoShop efficiently, most of the time the candidates only have aptitudes that are close to but not the requirements and I have to deduce how close the relationship is, which demands some in-field knowledge. In terms of programmers, I can decide on my own as I understand the general picture of their experiences(for example, already having been employed in software companies for two years means he should be capable of learning a new framework, have some understanding of low-level computer science knowledge and knows something about basic project collaboration); in terms of history researchers and artists, nonetheless, I usually need to contact my team members who have some background knowledge about them to assist my judgement. ( some interview examples are included in the folder). This process can be time-consuming and sometimes failed to judge the people’s ability accurately so we discussed and made some common interview questions that should cover the most serious defects seen in enrolled people(see the folder). Also, we made a formal requirement for potential applicants to notify them of expected skills(https://sciegzyh.feishu.cn/docs/doccngot6623cx5iXc94usbwvHh).

Unfortunately, as the project progressed, I found most of our members, regardless of sources, were still circumscribed by their offline daily study and work and could spend enough time. That’s why we started outsourcing online.

At the very beginning of the project, we tried to buy some artworks and employ some programmers, which all failed and costed around 20000 yuan. The main reason was the inability to judge accurately the overall quality and to clearly define our requirements as well as the terrible capability of the workers. We then stopped outsourcing until we had better understanding about the specific work in the team, and one of my team member suggested two global outsourcing mediums: Upwork and Fiverr where he suggested probably has better workers. We tried and while still wasted money in some cases(such as illustrations) because of inability to judge output quality and the worker’s inability to understand our requirement accurately due to culture difference, we did define requirements more clearly and find some credible and professional workers who could understand and make educated guess about our requirements. We also asked people in our QQ discussion group and found a professional worker who was able to understand even a bit ambiguous requirements precisely with high efficiency. In addition, some professional workers(such as an artist in game industry) had some personal connections that could also be employed. We decided to employ more people to promote the development in the fields where we were able to define clearly the requirement and had the knowledge and time to judge the final quality.

The game can be divided into two layers, which are the interaction layer and the mechanics' layer. The development of each layer has two stages in general: plans and implementation.

User interfaces and rendering are the two essential components of the interaction layer. While the user interface must be visually appreciated, it should not be the cost of its utility. Therefore, the functions of every UI element must be defined deliberately to assure players of a fluent interaction experience, for which I am currently responsible. With extensive experience with paradox series, I learn from their mastery as well as their mistakes and conclude two points. 

Firstly, abstraction is the priority of UI elements in-game with such genre because the information density has come to the degree at which stacking everything on the screen would effectively distract any new player completely and wreak havoc upon their incentive to continue playing. That is to say, I must leverage my comprehensive understanding of the game mechanics (since the discussion about which has involved me from the very beginning) to speculate the most valued information in the players’ minds and abstract unnecessary details behind another button. For example,   it is a prototype of the region information panel that abstracts the complex information about this region.  It shows the most vital information in a region: the possibility of rebellion. More specifically, it shows three pieces of utmost data: dissent, which shows the current attitude of the population towards the government, revolt rate, which shows the progress of ongoing revolt, and the population size, which shows the number of people actively involved in the game. By analyzing these data and only analyzing these data, the player would be able to predict roughly the date of a total outbreak of a sweeping rebellion and the power of the rebellion.  A click onto the panel above would open a new window that contains more detailed information about the populations that dwelt in this region. This would allow the player to zoom in onto each population, which reveals some more complex information(the possibility of cultural conflicts of populations, the population structure such as the social class distribution within farmers and so on.) Therefore, the information is stacked in a more human-friendly way where the player can focus more on the imperative information at each abstraction level without being consistently disturbed by unnecessary details.

Secondly, the switching between different UI elements should be adjusted to adapt the switching of concepts in the player’s mind, not on the contrary. A counterexample from Victoria II (another strategy game developed by Paradox Studio) is the switching between factories and map: factories are located on the regions in the map, but one cannot directly jump from a region on the map to its factories or vice versa. As a result, the player has to manually flip over pages of factories panel and pinpoint the correct result by eyes, which is a nuisance for the player. The game fails to offer a direct link between these two UI elements, which hence I should offer(for example, I would add another button on the region panel that links to the factories, vice versa.)

After the functional UI element is designed, the artists in my team would ornament it, changing its layout and making it more aesthetically appreciating. At first, I believed this work, due to its intrinsic nature, usually cannot be judged by a fixed set of objective rules. Hence, I usually let the artists make the first attempt and discussed any possible revision with the members who are willing to advise about the art design.
 
(first attempt)
 
(discussion)
 
(revised version)

The result, nonetheless, was not that good as some players strongly objected our aesthetic taste. Therefore, in order to decrease dissent, I let another person reworked the art styles by learning from their objection and formulated a more unified art style guide. 
 
(before modification)

 
(after modification, still WIP)

The new style would contain a set of standard common art elements(such as lists, tables and buttons) to simplify the work of artists. Also, it would contain a detailed color guide(for example, the color in the second image above is less bright and each pie chart only uses one color family.) The target of this style is not being appreciated by everyone, but not being disliked strongly by someone because most players would not purchase such type of games just because of beautiful UI, but would not purchase it because of terrible UI.

The final step of implementation is transforming the artwork into functioning program interfaces. When choosing UI frameworks in Unity game engine, I made one mistake. I blindly followed the advice from one of our unity expert that the traditional UGUI was significantly slower than the novel UI Toolkit because of unnecessary abstraction layers. While he did not lie, he ignored the fact that UI Toolkit lacked many user-created libraries which made reinventing the wheel inevitable. Also, because it was new, not many tutorials had been created and our workers often had to browse pages of official documentation and forums to seek the solution of a simple problem, greatly increasing the learning cost and made our UI progress lag behind other parts. Fortunately, the expert had understood his mistake and decided to use some codegen framework based on pure C#, which should be much easier to write while sacrificing some flexibility. I believe this trade-off is acceptable as long as development efficiency did increase. 

The rendering in our game is mainly about how to depict the map in the game. The art style is determined in a way similar to determining the art style of the UI elements. I am not responsible to implement it so I am rather unfamiliar with the specific implementation, which, however, involves the provision of data in certain formats which is one of my jobs. To be more specific, I need to request someone to make the raw images satisfy certain standards(see Map Process Procedure.pdf in the folder) and process them through algorithms so that an image(see raw map.png) that only contains solid, unique RGB colour regions(see regions.png) can be produced and be inputted into the game. The algorithms are usually based on very simple algorithms but adjusted to adapt our specific data and needs (for example, we have a colour-painting algorithm based on the breadth-first search that can automatically skip a series of colours while painting all other solid colour regions into different colours and eroding algorithm that can replace a series of colours with the adjoining colours.) I also utilize some libraries such as NumPy and Numba to accelerate the algorithm. In this field, the solution is relatively simple while defining the question accurately can be difficult: the correct order of points scattered on the edges of a concave polygon sorted clockwise around a centre within the polygon is undefined in Mathematics and I have to invent my definition that best satisfies our needs (sorting the border pixels of a region so that they can be drawn sequentially on the map.) 
 
(current rendered map)

While the mechanics' layer is under-the-hood, its significance should never be undervalued, and sometimes it is far more complicated than the interactive layer. 

In terms of design, since the game is based on history, extensive studies of history, including administrative systems, the mixed economy of primitive capitalism and feudalism based on subsistence farmers as well as landlords and tenants and battle details are then required to maintain realism in the game. It is usually done by undergraduates and graduates who major in related fields or are at least very interested in the Ming dynasty’s history. After that, I would discuss the game mechanics designed to simulate certain aspects of the history with them (an example is given in the folder). In general, they would try to model the history plainly and qualitatively and I would specify the details and reorganize certain descriptions or at least point out what stuff needs to be quantified(an example of a fully developed mechanic is in market.pdf). Then, someone would add it to game design(see game design.pdf) and then it was moved to next stage. I had tried to modified the discussion to improve efficiency but ultimately found this was the best current solution. I tried once to design a more quantitative language (like pseudocode) for them so that they could quantify the mechanics by themselves but I failed. Most of designers did not have any technical background at all so it was extremely difficult to teach them how to use a programming language to express thoughts. Also, pseudocode’s expressiveness was not enough to concisely depict every concept in game design. 

In terms of implementation, for the large-scale realistic simulation under the hood must run with very low delay (so the game experience is not seriously affected), the traditional object-oriented paradigm(OOP) is no longer feasible. Instead, I choose a data-oriented paradigm(DOP) that helps minimize the cache miss in the CPU, one of the most fundamental performance issues nowadays and writing highly parallel code that leverages the multi-core nature of CPU, and uses unity’s experimental Entities-Components-Systems(ECS) framework to implement the paradigm, which, unfortunately, as the name suggests, is not a mature framework and hence lacks a lot of utilities(for example, a fully functioning DateTime struct that records the time in-game) and documentation, especially for common patterns and idioms to express common relationships safely(for example, a reference) in programming. As a result, I have to invent some ‘wheels’ or utilities based on our own needs as well as explore possible solutions to many common relationships by thinking through my understanding of the low-level knowledge in the computers, searching on unity forums and reading the source code of unity’s ECS framework. Once I find a suitable one, I would write it down in documentation(see ECS experience.docx) and share it with other members. Before we expanded, most of the game logic codes were written by me and now I shift a lot of my workloads to them while I focus more on macro work such as considering the overall architecture of the game logic, writing technical documentation and reviewing their code. Most members only have an OOP background or even worse, so even if they have already read the tutorials provided by me(see tutorial1.docx and tutorial2.docx), I still have to review their code individually to point out potential problems, the most common among which would also be extracted and written into documentations to save my time. As a result, many old members now own the ability to develop independently because they now understand our specific technical context. For example, once I found cache miss was still high and I had some conjectures, which, could not be verified because I lacked tools that can collect related CPU data. Then, one of my team members spontaneously undertook this task and by utilizing his professional tools (VTune and an assembly code control flow graph generator) and debugging our code on his own, he located the root problem, told it to me and proposed a specific solution. He also participated in implementing the solution. 
Management
Managing 45 people aged from 14 to 33 and scattered all across China only through online chats requires a very distinct strategy from the common and traditional methodologies deployed. By trial and error, I figure out a solution named ‘Pragmatic Optimism.’ 

On one hand, ‘Pragmatic’ indicates an accentuation on details, concrete procedures and objective judgement: all the participants already have some levels of understanding of the general concept of our game and hence they are not motivated by a fancy or revolutionary design but their inner rational belief that we Tianshu Studio is one of the game teams that are feasible to actualize this conceptual game. Therefore, my primary task and possibly the only task as a manager is to maintain this flame in their minds; to prove their beliefs are correct and they are on the right path. How the work is carried specifically is then considered inevitably in my mind, for it is the most direct and vital source of the information they utilize to evaluate us. To more specific, I strive to assure that work should be done in a parallel fashion and transferred to the next person seamlessly through formalizing conventions and requirements in the process into documentations that can be then shared to beginners to familiarize them with tasks efficiently and detect any unexpected bottlenecks that would be pointed out frankly by me in the communication-we may not be able to solve these problems immediately, but at least I can convey the difficulties we encountered to everyone to promote our awareness. What’s more, the members would also be more willing to share their thoughts about the work with me, some of which could be very inspiring, impelling us to explore areas previously completely unknown to us, which also contributes to the progress of the game(an example of unexpected thoughts.docx). This phenomenon is even more heavily valued because all the communications can only take place online through texts and images, which effectively removes the possibility to observe more clues(facial expressions..) about their mental activities, and actively sharing is the only source of conveying their mental activities. 

Also, ‘pragmatic’ indicates merit-based authorization. It is an absolute necessity due to two reasons. Firstly, some members are much more capable of carrying out certain tasks than me. For example, a student who had sketching certificate definitely had better knowledge about illustrations so it was reasonable to authorize him for outsourcing illustrations so that aesthetic quality could hopefully be controlled. Meanwhile, his history knowledge was also less than an undergraduate majoring in history, so it is better to assign some history students to check the historical correctness of the requirements and the illustrations. Similarly, we usually do not have a leader who is completely in charge of something-in most cases, no one masters every aspects so some kinds of collaboration are always needed. In such shifting, I usually explain to members that I change their jobs just because their inferior skill in this specific field, not because they are inferior to others to maintain their confidence and incentive. Based on the same reason, if someone is incapable of doing certain tasks, I would change their jobs(usually to some more suitable or easier positions) and sometimes, if the members are overconfident, I would directly state why they are not capable to them to stop them from talking nonsense about their previous jobs. Secondly, my time was very limited especially after the second semester of A1 while many members had much more time than me. Therefore, I needed to shift some of my responsibility to them to save my time and to continue the development. In other words, I had to teach the people whose background is closest to my tasks not only the specific procedures to solve current problems but also more general ideas in this position. For example, when I taught a member to allocate tasks, I not only taught him how to use the task allocation builtin system, but also taught him the general guidelines of allocating tasks(such as actively checking current progress at least once a week and being specific about task content.) People are often forgetful and fall back to their previous methodology so reiteration is often needed to establish firm understanding in their minds. Once such comprehension is built, they can carry out tasks very efficiently just like me. 

On the other hand, ‘Optimism’ illustrates the general mood I convey throughout the communication: I would lucidly state the amelioration and progress so far to encourage the workers; I also comment on the challenges we currently face constructively, suggesting possible solutions. Cares must be taken when dealing with the latter--most people can understand inaccuracies or exaggeration in the achievement but would readily lose confidence if the challenges they feel are underestimated(the leader seems to deceive the whole team) or overestimated(the leader who knows best about the overall situation believes an ultimate failure is impending.) Hence, I usually plainly describe the problems we have objectively without deliberate concealment or unnecessary emphases and then immediately suggest potential solutions. At first, I would not state the solutions’ defects explicitly because I fear that their incentives would decrease if they feel that the current solution cannot solve the problem.(see the weekly report.pdf) As time passed by, nonetheless, the encountered problems became more difficult while solid achievements made people have stronger faith about our project. Therefore, I talked problems more objectively, stopped concealing the defects of current solutions, hoping people suggest useful solutions. They did. In fact, some people even argued that I should expose these problems earlier so they would know them early with more time to think about them. Of course, some people are discouraged sometimes, and then I would encourage them by explaining while such problems would affect the overall quality, it would neither stop the development of the game nor make all potential players stop buying the game. In other words, it would not destroy the future success. 
Future
In conclusion, while we definitely obtained significant achievements since the beginning of the project two years ago, the distance between current status and the first version is still very long. Next, I would try to convey more my knowledge and shift more my jobs to them and continue focusing on the tasks which they do not have enough knowledge to completely undertake. Hopefully, we can publish the preview video after this summer holiday and publish the first version on Steam next March.
